apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: kafka
  name: kafka
spec:
  ports:
    - name: tcp
      protocol: TCP
      port: 9092
      targetPort: 9092
  selector:
    io.kompose.service: kafka
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: zookeeper
  name: zookeeper
spec:
  ports:
    - name: tcp
      protocol: TCP
      port: 2181
      targetPort: 2181
  selector:
    io.kompose.service: zookeeper
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
spec:
  selector:
    matchLabels:
      app: kafka
      io.kompose.service: kafka
      version: latest
  serviceName: kafka
  replicas: 1
  template:
    metadata:
      labels:
        app: kafka
        io.kompose.service: kafka
        version: latest
    spec:
      initContainers:
        - name: volume-permissions
          image: busybox
          command: ["sh", "-c", "chmod -R g+rwX /bitnami"]
          volumeMounts:
            - mountPath: /bitnami
              name: kafka-data
      terminationGracePeriodSeconds: 10
      containers:
        - name: kafka
          image: bitnami/kafka:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper:2181
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          ports:
            - name: tcp
              protocol: TCP
              containerPort: 9092
          resources:
            limits:
              memory: "700Mi"
              cpu: "700m"
            requests:
              memory: "500Mi"
              cpu: "500m"
          volumeMounts:
            - name: kafka-data
              mountPath: /bitnami/kafka
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: kafka-data
  name: kafka-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
spec:
  selector:
    matchLabels:
      app: zookeeper
      io.kompose.service: zookeeper
      version: latest
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: zookeeper
        io.kompose.service: zookeeper
        version: latest
    spec:
      initContainers:
        - name: volume-permissions
          image: busybox
          command: ["sh", "-c", "chmod -R g+rwX /bitnami"]
          volumeMounts:
            - mountPath: /bitnami
              name: zookeeper-data
      containers:
        - image: bitnami/zookeeper:latest
          name: zookeeper
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
          ports:
            - containerPort: 2181
              name: tcp
              protocol: TCP
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "200m"
          volumeMounts:
            - mountPath: /bitnami/zookeeper
              name: zookeeper-data
      restartPolicy: Always
      volumes:
        - name: zookeeper-data
          persistentVolumeClaim:
            claimName: zookeeper-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: zookeeper-data
  name: zookeeper-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
